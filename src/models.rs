// Generated by diesel_ext

#![allow(unused, non_snake_case)]
#![allow(clippy::all)]

pub mod pds {

    use anyhow::{Result, bail};
    use chrono::DateTime;
    use chrono::offset::Utc;
    use diesel::backend::Backend;
    use diesel::deserialize::FromSql;
    use diesel::prelude::*;
    use diesel::serialize::{Output, ToSql};
    use diesel::sql_types::Text;
    use diesel::sqlite::Sqlite;
    use diesel::*;
    use serde::{Deserialize, Serialize};

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(request_uri))]
    #[diesel(table_name = crate::schema::pds::oauth_par_requests)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct OauthParRequest {
        pub request_uri: String,
        pub client_id: String,
        pub response_type: String,
        pub code_challenge: String,
        pub code_challenge_method: String,
        pub state: Option<String>,
        pub login_hint: Option<String>,
        pub scope: Option<String>,
        pub redirect_uri: Option<String>,
        pub response_mode: Option<String>,
        pub display: Option<String>,
        pub created_at: i64,
        pub expires_at: i64,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(code))]
    #[diesel(table_name = crate::schema::pds::oauth_authorization_codes)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct OauthAuthorizationCode {
        pub code: String,
        pub client_id: String,
        pub subject: String,
        pub code_challenge: String,
        pub code_challenge_method: String,
        pub redirect_uri: String,
        pub scope: Option<String>,
        pub created_at: i64,
        pub expires_at: i64,
        pub used: bool,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(token))]
    #[diesel(table_name = crate::schema::pds::oauth_refresh_tokens)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct OauthRefreshToken {
        pub token: String,
        pub client_id: String,
        pub subject: String,
        pub dpop_thumbprint: String,
        pub scope: Option<String>,
        pub created_at: i64,
        pub expires_at: i64,
        pub revoked: bool,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(jti))]
    #[diesel(table_name = crate::schema::pds::oauth_used_jtis)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct OauthUsedJti {
        pub jti: String,
        pub issuer: String,
        pub created_at: i64,
        pub expires_at: i64,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(did))]
    #[diesel(table_name = crate::schema::pds::account)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Account {
        pub did: String,
        pub email: String,
        #[diesel(column_name = recoveryKey)]
        #[serde(rename = "recoveryKey")]
        pub recovery_key: Option<String>,
        pub password: String,
        #[diesel(column_name = createdAt)]
        #[serde(rename = "createdAt")]
        pub created_at: String,
        #[diesel(column_name = invitesDisabled)]
        #[serde(rename = "invitesDisabled")]
        pub invites_disabled: i16,
        #[diesel(column_name = emailConfirmedAt)]
        #[serde(rename = "emailConfirmedAt")]
        pub email_confirmed_at: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(table_name = crate::schema::pds::account_pref)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct AccountPref {
        pub id: i32,
        pub did: String,
        pub name: String,
        pub valueJson: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(did))]
    #[diesel(table_name = crate::schema::pds::actor)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Actor {
        pub did: String,
        pub handle: Option<String>,
        pub createdAt: String,
        pub takedownRef: Option<String>,
        pub deactivatedAt: Option<String>,
        pub deleteAfter: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(did, name))]
    #[diesel(table_name = crate::schema::pds::app_password)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct AppPassword {
        pub did: String,
        pub name: String,
        pub password: String,
        pub createdAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(table_name = crate::schema::pds::authorization_request)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct AuthorizationRequest {
        pub id: String,
        pub did: Option<String>,
        pub deviceId: Option<String>,
        pub clientId: String,
        pub clientAuth: String,
        pub parameters: String,
        pub expiresAt: DateTime<Utc>,
        pub code: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(uri, path))]
    #[diesel(table_name = crate::schema::pds::backlink)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Backlink {
        pub uri: String,
        pub path: String,
        pub linkTo: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(cid, did))]
    #[diesel(table_name = crate::schema::pds::blob)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Blob {
        pub cid: String,
        pub did: String,
        pub mimeType: String,
        pub size: i32,
        pub tempKey: Option<String>,
        pub width: Option<i32>,
        pub height: Option<i32>,
        pub createdAt: String,
        pub takedownRef: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(table_name = crate::schema::pds::device)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Device {
        pub id: String,
        pub sessionId: Option<String>,
        pub userAgent: Option<String>,
        pub ipAddress: String,
        pub lastSeenAt: DateTime<Utc>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(deviceId, did))]
    #[diesel(table_name = crate::schema::pds::device_account)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct DeviceAccount {
        pub did: String,
        pub deviceId: String,
        pub authenticatedAt: DateTime<Utc>,
        pub remember: bool,
        pub authorizedClients: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(did))]
    #[diesel(table_name = crate::schema::pds::did_doc)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct DidDoc {
        pub did: String,
        pub doc: String,
        pub updatedAt: i64,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(purpose, did))]
    #[diesel(table_name = crate::schema::pds::email_token)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct EmailToken {
        pub purpose: String,
        pub did: String,
        pub token: String,
        pub requestedAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(code))]
    #[diesel(table_name = crate::schema::pds::invite_code)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct InviteCode {
        pub code: String,
        pub availableUses: i32,
        pub disabled: i16,
        pub forAccount: String,
        pub createdBy: String,
        pub createdAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(code, usedBy))]
    #[diesel(table_name = crate::schema::pds::invite_code_use)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct InviteCodeUse {
        pub code: String,
        pub usedBy: String,
        pub usedAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(uri))]
    #[diesel(table_name = crate::schema::pds::record)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Record {
        pub uri: String,
        pub cid: String,
        pub did: String,
        pub collection: String,
        pub rkey: String,
        pub repoRev: Option<String>,
        pub indexedAt: String,
        pub takedownRef: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(blobCid, recordUri))]
    #[diesel(table_name = crate::schema::pds::record_blob)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct RecordBlob {
        pub blobCid: String,
        pub recordUri: String,
        pub did: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(table_name = crate::schema::pds::refresh_token)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct RefreshToken {
        pub id: String,
        pub did: String,
        #[diesel(column_name = expiresAt)]
        #[serde(rename = "expiresAt")]
        pub expires_at: String,
        #[diesel(column_name = nextId)]
        #[serde(rename = "nextId")]
        pub next_id: Option<String>,
        #[diesel(column_name = appPasswordName)]
        #[serde(rename = "appPasswordName")]
        pub app_password_name: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(cid, did))]
    #[diesel(table_name = crate::schema::pds::repo_block)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct RepoBlock {
        pub cid: String,
        pub did: String,
        pub repoRev: String,
        pub size: i32,
        pub content: Vec<u8>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(did))]
    #[diesel(table_name = crate::schema::pds::repo_root)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct RepoRoot {
        pub did: String,
        pub cid: String,
        pub rev: String,
        pub indexedAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(seq))]
    #[diesel(table_name = crate::schema::pds::repo_seq)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct RepoSeq {
        pub seq: i64,
        pub did: String,
        pub eventType: String,
        pub event: Vec<u8>,
        pub invalidated: i16,
        pub sequencedAt: String,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(table_name = crate::schema::pds::token)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct Token {
        pub id: String,
        pub did: String,
        pub tokenId: String,
        pub createdAt: DateTime<Utc>,
        pub updatedAt: DateTime<Utc>,
        pub expiresAt: DateTime<Utc>,
        pub clientId: String,
        pub clientAuth: String,
        pub deviceId: Option<String>,
        pub parameters: String,
        pub details: Option<String>,
        pub code: Option<String>,
        pub currentRefreshToken: Option<String>,
    }

    #[derive(
        Queryable,
        Identifiable,
        Selectable,
        Clone,
        Debug,
        PartialEq,
        Default,
        Serialize,
        Deserialize,
    )]
    #[diesel(primary_key(refreshToken))]
    #[diesel(table_name = crate::schema::pds::used_refresh_token)]
    #[diesel(check_for_backend(Sqlite))]
    pub struct UsedRefreshToken {
        pub refreshToken: String,
        pub tokenId: String,
    }
}
